// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "Includes/Noise.compute"

RWTexture3D<float> NoiseTexture;

int textureSize;
float cubeSize;
float noiseScale;
float gridSize;
float noiseHeightMultiplier;

float fbm(int numLayers, float lacunarity, float persistence, float scale, float3 pos) 
{
	float noise = 0;
	float frequency = scale / 1000;
	float amplitude = 1;

	for (int i = 0; i < numLayers; i++) 
	{
		float n = 1 - abs(snoise(pos * frequency) * 2 - 1);
		noise += n * amplitude;

		amplitude *= persistence;
		frequency *= lacunarity;
	}

	return noise;
}

[numthreads(8, 8, 8)]
void CSMain(int3 id : SV_DispatchThreadID)
{
	if (id.x >= textureSize || id.y >= textureSize || id.z >= textureSize) {
		return;
	}

	NoiseTexture[id] = fbm(6, 2, 0.5, noiseScale, id) * noiseHeightMultiplier;
}
